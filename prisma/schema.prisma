generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Profile {
  id String @id @default(uuid())
  firstName String
  lastName String

  player Player?
  official Official?
  coach Coach?
}

model Player {
  id String @id @default(uuid())
  
  profile Profile @relation(fields: [profileId], references: [id])
  profileId String @unique

  teamAssignments PlayerTeamAssignment[]
  lineups Lineup[]
  perMatchStatistics PlayerPerMatchStatistic[]
  matchEventParticipations MatchEventParticipation[]
}

model PlayerPosition {
  id String @id @default(uuid())
  name String @unique
  description String

  teamAssignments PlayerTeamAssignment[]
  lineups Lineup[]
}

model PlayerTeamAssignment {
  id String @id @default(uuid())

  player Player @relation(fields: [playerId], references: [id])
  playerId String

  team Team @relation(fields: [teamId], references: [id])
  teamId String

  playerPosition PlayerPosition @relation(fields: [playerPositionId], references: [id])
  playerPositionId String

  season Season @relation(fields: [seasonId], references: [id])
  seasonId String

  @@unique([playerId, seasonId])
}

model Coach {
  id String @id @default(uuid())

  profile Profile @relation(fields: [profileId], references: [id])
  profileId String @unique

  teamAssignments CoachTeamAssignment[]
}

model CoachTeamAssignment {
  id String @id @default(uuid())

  coach Coach @relation(fields: [coachId], references: [id])
  coachId String

  team Team @relation(fields: [teamId], references: [id])
  teamId String

  season Season @relation(fields: [seasonId], references: [id])
  seasonId String

  @@unique([coachId, seasonId, teamId])
}

model Official {
  id String @id @default(uuid())

  profile Profile @relation(fields: [profileId], references: [id])
  profileId String @unique

  assignments RefereeCrewAssignment[]
}

model OfficialRole {
  id String @id @default(uuid())
  name String @unique
  description String

  assignments RefereeCrewAssignment[]
}

model RefereeCrew {
  id String @id @default(uuid())

  assignments RefereeCrewAssignment[]
  matches Match[]
}
model RefereeCrewAssignment {
  id String @id @default(uuid())

  official Official @relation(fields: [officialId], references: [id])
  officialId String

  role OfficialRole @relation(fields: [roleId], references: [id])
  roleId String

  refereeCrew RefereeCrew @relation(fields: [refereeCrewId], references: [id])
  refereeCrewId String
}

model Club {
  id String @id @default(uuid())

  name String @unique

  teamAssignments ClubTeamAssignment[]
}

model ClubTeamAssignment {
  id String @id @default(uuid())

  club Club @relation(fields: [clubId], references: [id])
  clubId String

  team Team @relation(fields: [teamId], references: [id])
  teamId String

  season Season @relation(fields: [seasonId], references: [id])
  seasonId String

  @@unique([seasonId, teamId])
}

model Team {
  id String @id @default(uuid())

  competitionEdition CompetitionEdition @relation(fields: [competitionEditionId], references: [id])
  competitionEditionId String

  clubAssignments ClubTeamAssignment[]
  coachAssignments CoachTeamAssignment[]
  playerAssignments PlayerTeamAssignment[]
  matchAppearances TeamMatchAppearance[]
  matchEvents MatchEvent[]
  perMatchStatistics TeamPerMatchStatistic[]
}

model TeamMatchAppearance {
  id String @id @default(uuid())

  isHome Boolean

  match Match @relation(fields: [matchId], references: [id])
  matchId String

  team Team @relation(fields: [teamId], references: [id])
  teamId String

  lineup Lineup[]
}

model TeamPerMatchStatistic {
  id String @id @default(uuid())

  team Team @relation(fields: [teamId], references: [id])
  teamId String

  match Match @relation(fields: [matchId], references: [id])
  matchId String

  type TeamPerMatchStatisticType @relation(fields: [typeId], references: [id])
  typeId String

  value Float

  @@unique([teamId, matchId, typeId])
}

model TeamPerMatchStatisticType {
  id String @id @default(uuid())

  name String @unique
  description String

  category TeamPerMatchStatisticCategory @relation(fields: [categoryId], references: [id])
  categoryId String

  teamStatistics TeamPerMatchStatistic[]
}

model TeamPerMatchStatisticCategory {
  id String @id @default(uuid())

  name String @unique
  description String

  statisticTypes TeamPerMatchStatisticType[]
}

model Match {
  id String @id @default(uuid())

  venueAssignments VenueMatchAssignment[]

  competitionEdition CompetitionEdition @relation(fields: [competitionEditionId], references: [id])
  competitionEditionId String

  round Round @relation(fields: [roundId], references: [id])
  roundId String

  refereeCrew RefereeCrew @relation(fields: [refereeCrewId], references: [id])
  refereeCrewId String

  teamAppearances TeamMatchAppearance[]
  teamStatistics TeamPerMatchStatistic[]
  playerStatistics PlayerPerMatchStatistic[]
  events MatchEvent[]
  
}

model Lineup {
  id String @id @default(uuid())

  teamMatchAppearance TeamMatchAppearance @relation(fields: [teamMatchAppearanceId], references: [id])
  teamMatchAppearanceId String

  player Player @relation(fields: [playerId], references: [id])
  playerId String

  position PlayerPosition @relation(fields: [positionId], references: [id])
  positionId String

  jerseyNumber Int

  @@index([teamMatchAppearanceId, jerseyNumber])

  @@unique([teamMatchAppearanceId, playerId])
}

model Season {
  id String @id @default(uuid())
  year Int @unique

  editions CompetitionEdition[]
  playerTeamAssignments PlayerTeamAssignment[]
  coachTeamAssignments CoachTeamAssignment[]
  clubTeamAssignments ClubTeamAssignment[]
}

model Competition {
  id String @id @default(uuid())
  name String @unique

  editions CompetitionEdition[]
}

model CompetitionEdition {
  id String @id @default(uuid())

  competition Competition @relation(fields: [competitionId], references: [id])
  competitionId String

  season Season @relation(fields: [seasonId], references: [id])
  seasonId String

  matches Match[]
  teams Team[]
  rounds Round[]

  @@unique([competitionId, seasonId])
}

model Venue {
  id String @id @default(uuid())
  name String @unique

  matchAssignments VenueMatchAssignment[]
}

model VenueMatchAssignment {
  id String @id @default(uuid())

  venue Venue @relation(fields: [venueId], references: [id])
  venueId String

  match Match @relation(fields: [matchId], references: [id])
  matchId String
}

model Round {
    id String @id @default(uuid())

    competitionEdition CompetitionEdition @relation(fields: [competitionEditionId], references: [id])
    competitionEditionId String

    number Int
    name String?

    type String

    matches Match[]

    @@unique([competitionEditionId, number])
}

model PlayerPerMatchStatistic {
    id String @id @default(uuid())

    player Player @relation(fields: [playerId], references: [id])
    playerId String

    match Match @relation(fields: [matchId], references: [id])
    matchId String

    type PlayerPerMatchStatisticType @relation(fields: [typeId], references: [id])
    typeId String

    value Float

    @@unique([playerId, matchId, typeId])
}

model PlayerPerMatchStatisticType {
    id String @id @default(uuid())
    name String @unique
    description String

    category PlayerPerMatchStatisticCategory @relation(fields: [categoryId], references: [id])
    categoryId String

    playerStatistics PlayerPerMatchStatistic[]
}

model PlayerPerMatchStatisticCategory {
    id String @id @default(uuid())
    name String @unique
    description String

    statisticTypes PlayerPerMatchStatisticType[]
}

model MatchEvent {
    id String @id @default(uuid())
    
    match Match @relation(fields: [matchId], references: [id])
    matchId String

    team Team @relation(fields: [teamId], references: [id])
    teamId String

    participations MatchEventParticipation[]

    timestamp Int

    type MatchEventType @relation(fields: [typeId], references: [id])
    typeId String

    @@index([matchId, timestamp])
}

model MatchEventType {
    id String @id @default(uuid())

    name String @unique
    description String

    events MatchEvent[]
}

model MatchEventParticipation {
  id String @id @default(uuid())

  event MatchEvent @relation(fields: [eventId], references: [id])
  eventId String

  player Player @relation(fields: [playerId], references: [id])
  playerId String

  role MatchEventParticipationRole @relation(fields: [roleId], references: [id])
  roleId String

  @@unique([eventId, playerId])
}

model MatchEventParticipationRole {
  id String @id @default(uuid())
  name String @unique
  description String

  participations MatchEventParticipation[]
}
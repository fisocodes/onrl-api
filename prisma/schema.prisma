generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Profile {
  @@map("profiles")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  firstName String
  lastName String

  player Player?
  official Official?
  coach Coach?
}

// PLAYER DOMAIN
model Player {
  @@map("players")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  
  profile Profile @relation(fields: [profileId], references: [id])
  profileId String @unique

  height Float
  weight Float
  dateOfBirth DateTime @map("date_of_birth")
  birthPlace String @map("birth_place")

  teamAssignments PlayerTeamAssignment[]
  lineups Lineup[]
  perMatchStatistics PlayerPerMatchStatistic[]
  participationsInMatchEvents PlayerParticipationInMatchEvent[]
}

model PlayerTacticalPosition {
  @@map("player_tactical_positions")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  name String @unique
  description String

  teamAssignments PlayerTeamAssignment[]
  lineups Lineup[]
}

model PlayerTeamAssignment {
  @@map("player_team_assignments")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  player Player @relation(fields: [playerId], references: [id])
  playerId String @map("player_id")

  team Team @relation(fields: [teamId], references: [id])
  teamId String @map("team_id")

  position PlayerTacticalPosition @relation(fields: [positionId], references: [id])
  positionId String @map("position_id")

  season Season @relation(fields: [seasonId], references: [id])
  seasonId String @map("season_id")

  @@unique([playerId, seasonId])
}

model PlayerPerMatchStatistic {
  @@map("player_per_match_statistics")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  player Player @relation(fields: [playerId], references: [id])
  playerId String @map("player_id")

  match Match @relation(fields: [matchId], references: [id])
  matchId String @map("match_id")

  type PlayerPerMatchStatisticType @relation(fields: [typeId], references: [id])
  typeId String @map("type_id")

  value Float

  @@unique([playerId, matchId, typeId])
}

model PlayerPerMatchStatisticType {
  @@map("player_per_match_statistic_types")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  name String @unique
  description String

  category PlayerPerMatchStatisticCategory @relation(fields: [categoryId], references: [id])
  categoryId String @map("category_id")

  statistics PlayerPerMatchStatistic[]
}

model PlayerPerMatchStatisticCategory {
  @@map("player_per_match_statistic_categories")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
    
  name String @unique
  description String

  types PlayerPerMatchStatisticType[]
}

// PLAYER DOMAIN


// COACH DOMAIN

model Coach {
  @@map("coaches")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  profile Profile @relation(fields: [profileId], references: [id])
  profileId String @unique @map("profile_id")

  teamAssignments CoachTeamAssignment[]
}

model CoachTeamAssignment {
  @@map("coach_assignments_to_teams")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  coach Coach @relation(fields: [coachId], references: [id])
  coachId String @map("coach_id")

  team Team @relation(fields: [teamId], references: [id])
  teamId String @map("team_id")

  season Season @relation(fields: [seasonId], references: [id])
  seasonId String @map("season_id")

  @@unique([coachId, seasonId, teamId])
}

// COACH DOMAIN


// REFEREE DOMAIN

model Official {
  @@map("officials")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  profile Profile @relation(fields: [profileId], references: [id])
  profileId String @unique @map("profile_id")

  assignments RefereeCrewAssignment[]
}

model OfficialRole {
  @@map("official_roles")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  name String @unique
  description String

  assignments RefereeCrewAssignment[]
}

model RefereeCrew {
  @@map("referee_crews")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  assignments RefereeCrewAssignment[]
  matches Match[]
}
model RefereeCrewAssignment {
  @@map("referee_crew_assignments")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  official Official @relation(fields: [officialId], references: [id])
  officialId String @map("official_id")

  role OfficialRole @relation(fields: [roleId], references: [id])
  roleId String @map("role_id")

  refereeCrew RefereeCrew @relation(fields: [refereeCrewId], references: [id])
  refereeCrewId String @map("referee_crew_id")
}

// REFEREE DOMAIN


//CLUB DOMAIN

model Club {
  @@map("clubs")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  name String @unique

  teamAssignments ClubTeamAssignment[]
}

model ClubTeamAssignment {
  @@map("club_team_assignments")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  club Club @relation(fields: [clubId], references: [id])
  clubId String @map("club_id")

  team Team @relation(fields: [teamId], references: [id])
  teamId String @map("team_id")

  season Season @relation(fields: [seasonId], references: [id])
  seasonId String @map("season_id")

  @@unique([seasonId, teamId])
}

// CLUB DOMAIN


// TEAM DOMAIN

model Team {
  @@map("teams")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  competitionEdition CompetitionEdition @relation(fields: [competitionEditionId], references: [id])
  competitionEditionId String @map("competition_edition_id")

  clubAssignments ClubTeamAssignment[]
  coachAssignments CoachTeamAssignment[]
  playerAssignments PlayerTeamAssignment[]
  matchAppearances TeamMatchAppearance[]
  matchEvents MatchEvent[]
  perMatchStatistics TeamPerMatchStatistic[]
}

model Lineup {
  @@map("lineups")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  teamMatchAppearance TeamMatchAppearance @relation(fields: [teamMatchAppearanceId], references: [id])
  teamMatchAppearanceId String @map("team_match_appearance_id")

  player Player @relation(fields: [playerId], references: [id])
  playerId String @map("player_id")

  position PlayerTacticalPosition @relation(fields: [positionId], references: [id])
  positionId String @map("role_id")

  jerseyNumber Int @map("jersey_number")

  @@index([teamMatchAppearanceId, jerseyNumber])

  @@unique([teamMatchAppearanceId, playerId])
}

model TeamMatchAppearance {
  @@map("team_match_appearances")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  isHome Boolean @map("is_home")

  match Match @relation(fields: [matchId], references: [id])
  matchId String @map("match_id")

  team Team @relation(fields: [teamId], references: [id])
  teamId String @map("team_id")

  lineup Lineup[]
}

model TeamPerMatchStatistic {
  @@map("team_per_match_statistics")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  team Team @relation(fields: [teamId], references: [id])
  teamId String @map("team_id")

  match Match @relation(fields: [matchId], references: [id])
  matchId String @map("match_id")

  type TeamPerMatchStatisticType @relation(fields: [typeId], references: [id])
  typeId String @map("type_id")

  value Float

  @@unique([teamId, matchId, typeId])
}

model TeamPerMatchStatisticType {
  @@map("team_per_match_statistic_types")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  name String @unique
  description String

  category TeamPerMatchStatisticCategory @relation(fields: [categoryId], references: [id])
  categoryId String @map("category_id")

  statistics TeamPerMatchStatistic[]
}

model TeamPerMatchStatisticCategory {
  @@map("team_per_match_statistic_categories")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  name String @unique
  description String

  types TeamPerMatchStatisticType[]
}

// TEAM DOMAIN

//MATCH DOMAIN
model Match {
  @@map("matches")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  venueAssignments VenueMatchAssignment[]

  competitionEdition CompetitionEdition @relation(fields: [competitionEditionId], references: [id])
  competitionEditionId String @map("competition_edition_id")

  round Round @relation(fields: [roundId], references: [id])
  roundId String @map("round_id")

  refereeCrew RefereeCrew @relation(fields: [refereeCrewId], references: [id])
  refereeCrewId String @map("referee_crew_id")

  teamAppearances TeamMatchAppearance[]
  teamStatistics TeamPerMatchStatistic[]
  playerStatistics PlayerPerMatchStatistic[]
  events MatchEvent[]
  
}

model MatchEvent {
  @@map("match_events")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
    
  match Match @relation(fields: [matchId], references: [id])
  matchId String @map("match_id")

  team Team @relation(fields: [teamId], references: [id])
  teamId String @map("team_id")

  participations PlayerParticipationInMatchEvent[]

  timestamp Int

  type MatchEventType @relation(fields: [typeId], references: [id])
  typeId String @map("type_id")

  @@index([matchId, timestamp])
}

model MatchEventType {
  @@map("match_event_type")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  name String @unique
  description String

  events MatchEvent[]
}

model PlayerParticipationInMatchEvent {
  @@map("match_event_participation")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  event MatchEvent @relation(fields: [eventId], references: [id])
  eventId String @map("event_id")

  player Player @relation(fields: [playerId], references: [id])
  playerId String @map("player_id")

  role MatchEventParticipationRole @relation(fields: [roleId], references: [id])
  roleId String @map("role_id")

  @@unique([eventId, playerId])
}

model MatchEventParticipationRole {
  @@map("match_event_participation_roles")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  name String @unique
  description String

  participations PlayerParticipationInMatchEvent[]
}

// MATCH DOMAIN

// COMPETITION DOMAIN

model Competition {
  @@map("competitions")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  name String @unique

  editions CompetitionEdition[]
}

model CompetitionEdition {
  @@map("competition_editions")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  competition Competition @relation(fields: [competitionId], references: [id])
  competitionId String

  season Season @relation(fields: [seasonId], references: [id])
  seasonId String

  matches Match[]
  teams Team[]
  rounds Round[]

  @@unique([competitionId, seasonId])
}

// COMPETITION DOMAIN


// VENUE DOMAIN
model Venue {
  @@map("venues")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  name String @unique

  matchAssignments VenueMatchAssignment[]
}

model VenueMatchAssignment {
  @@map("venue_match_assignments")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  venue Venue @relation(fields: [venueId], references: [id])
  venueId String

  match Match @relation(fields: [matchId], references: [id])
  matchId String
}

// VENUE DOMAIN


// GENERAL DOMAIN

model Season {
  @@map("seasons")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  year Int @unique

  editions CompetitionEdition[]
  playerTeamAssignments PlayerTeamAssignment[]
  coachTeamAssignments CoachTeamAssignment[]
  clubTeamAssignments ClubTeamAssignment[]
}

model Round {
  @@map("rounds")

  id String @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  competitionEdition CompetitionEdition @relation(fields: [competitionEditionId], references: [id])
  competitionEditionId String

  number Int
  name String?

  type String

  matches Match[]

  @@unique([competitionEditionId, number])
}

// GENERAL DOMAIN